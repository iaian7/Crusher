/* 
 This file was generated by Dashcode.
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
	dashcode.setupParts();
	loadPrefs();
	versionCheck();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	// Stop any timers to prevent CPU usage
	// Remove any preferences as needed
	// widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	erasePrefs();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop any timers to prevent CPU usage
	updatePrefs();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	// Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
	// Retrieve any preference values that you need to be synchronized here
	// Use this for an instance key's value:
	// instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	//
	// Or this for global key's value:
	// globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToBack");
	}

	front.style.display = "none";
	back.style.display = "block";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToFront");
		updatePrefs();
	}

	front.style.display="block";
	back.style.display="none";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

if (window.widget) {
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
	widget.onsync = sync;
}



// ---------------------------- //
// Begin app-specific functions //
// ---------------------------- //



var wid = widget.identifier;
var prefDither = loadPref(wid+"dither","false");
var prefIE6 = loadPref(wid+"ie6","false");
var prefColors = loadPref(wid+"colors","256");
var prefLocation = loadPref(wid+"loc","/opt/local/bin/");
var prefQuality = loadPref(wid+"quality",2);
var prefOverwrite = loadPref(wid+"overwrite",1);
var prefName = loadPref(wid+"name",".colors");
var prefNameDither = loadPref(wid+"nameDither",".dither");
var prefNameIE6 = loadPref(wid+"nameIE6",".ie6");

// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	alert("ready!");
	document.getElementById("dither").checked = prefDither;
	document.getElementById("ie6").checked = prefDither;
	document.getElementById("colors").value = prefColors;
	document.getElementById("loc").value = prefLocation;
	document.getElementById("quality").object.setSelectedIndex(prefQuality);
	document.getElementById("overwrite").object.setSelectedIndex(prefOverwrite);
	document.getElementById("name").value = prefName;
	document.getElementById("nameDither").value = prefNameDither;
	document.getElementById("nameIE6").value = prefNameIE6;
//	updateDither(dither);
}

function updatePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(prefDither,wid+"dither");
		widget.setPreferenceForKey(prefIE6,wid+"ie6");
		widget.setPreferenceForKey(prefColors,wid+"colors");
		widget.setPreferenceForKey(prefLocation,wid+"loc");
		widget.setPreferenceForKey(prefQuality,wid+"quality");
		widget.setPreferenceForKey(prefOverwrite,wid+"overwrite");
		widget.setPreferenceForKey(prefName,wid+"name");
		widget.setPreferenceForKey(prefNameDither,wid+"nameDither");
		widget.setPreferenceForKey(prefNameIE6,wid+"nameIE6");
	}
}

function erasePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(null,wid+"dither");
		widget.setPreferenceForKey(null,wid+"ie6");
		widget.setPreferenceForKey(null,wid+"colors");
		widget.setPreferenceForKey(null,wid+"loc");
		widget.setPreferenceForKey(null,wid+"quality");
		widget.setPreferenceForKey(null,wid+"overwrite");
		widget.setPreferenceForKey(null,wid+"name");
		widget.setPreferenceForKey(null,wid+"nameDither");
		widget.setPreferenceForKey(null,wid+"nameIE6");
	}
}

// Basic Functions

function updateSlider(event) {
//	alert("updateSlider parse: "+parseInt(parseFloat(document.getElementById("slider").value)));
	prefColors = parseInt(parseFloat(document.getElementById("slider").value));
	document.getElementById("colors").value = prefColors;
	document.getElementById("slider").value = prefColors;
}

function updateColors(event) {
	var data = parseInt(event.target.value);

	if (event.keyCode == 38) {	// detect up arrow key and modify values
		if (event.shiftKey == true) {
			data += 16;
		} else {
			data += 4;
		}
		data = (data<8)?8:(data>256)?256:data;
		event.target.value = data;
		selectIt(event.target);
	} else if (event.keyCode == 40) {	// detect down arrow key and modify values
		if (event.shiftKey == true) {
			data -= 16;
		} else {
			data -= 4;	
		}
		data = (data<8)?8:(data>256)?256:data;
		event.target.value = data;
		selectIt(event.target);
	} else if (event.keyCode == 13) {
		data = (data<8)?8:(data>256)?256:data;
		event.target.value = data;
		selectIt(event.target);
	}

	prefColors = (data<1)?8:(data>256)?256:data;
	if (event.target.value != prefColors) event.target.value = prefColors;
//	document.getElementById("colors").value = prefColors;
	document.getElementById("slider").value = prefColors;
}

function updateDither(event) {
	if (event.target.id == "ditherInput") {
		prefDither = event.target.checked;
//		prefDither = document.getElementById("ditherInput").checked;
	} else {
		var element = document.getElementById("ditherInput");
		element.checked = (element.checked)?false:true;
		prefDither = element.checked;
	}
	updatePrefs();
	alert("prefDither: "+prefDither);
}

function updateIE6(event) {
	if (event.target.id == "ie6Input") {
		prefIE6 = event.target.checked;
//		prefIE6 = document.getElementById("ie6Input").checked;
	} else {
		var element = document.getElementById("ie6Input");
		element.checked = (element.checked)?false:true;
		prefIE6 = element.checked;
	}
	updatePrefs();
	alert("prefIE6: "+prefIE6);
}

function updateLoc(event) {
	prefLoc = document.getElementById("loc").value;
	alert("prefLoc: "+prefLoc);
}

function updateQuality(event) {
	prefQuality = document.getElementById("quality").object.getSelectedIndex();
	updatePrefs();
	alert("prefQuality: "+prefQuality);
}

function updateOverwrite(event) {
	prefOverwrite = document.getElementById("overwrite").object.getSelectedIndex();
	updatePrefs();
	alert("prefOverwrite: "+prefOverwrite);
}

function updateName(event) {
	prefName = document.getElementById("name").value;
	alert("prefName: "+prefName);
}

function updateNameDither(event) {
	prefNameDither = document.getElementById("nameDither").value;
	alert("prefNameDither: "+prefNameDither);
}

function updateNameIE6(event) {
	prefNameIE6 = document.getElementById("nameIE6").value;
	alert("prefNameIE6: "+prefNameIE6);
}

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}

// Be sure to assign these handlers for the ondragenter and ondragover events on your drop target. These handlers prevent Web Kit from processing drag events so you can handle the drop when it occurs.

function dragEnter(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragOver(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragDrop(event) {
try {
	uri = event.dataTransfer.getData("text/uri-list");
	uri = uri.replace(/file:\/\/localhost/gi, "");
	uri = uri.replace(/\%20/gi, "\\ ");
	uri = uri.split("\n");
	uri = uri.sort(sortAlphaNum);
	alert("uri list: "+uri.join("\n"));
var	settings  = (prefOverwrite)?" -force":"";
	settings += " -speed "+(prefQuality+1);
	settings += (prefDither == true)?"":" -nofs";
	settings += (prefIE6 == true)?" -iebug":"";
	settings += " -ext "+prefName.replace("colors",prefColors);
	settings += (prefDither == true)?prefNameDither:"";
	settings += (prefIE6 == true)?prefNameIE6:"";
	settings += ".png "+prefColors+" ";
	alert("settings: "+settings);

/*	if (uri.length == 1) {
		if (prefOverwrite == 0 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha set "+scale+colors+" -geometry "+geometry+mode+uriParts[1]+"*"+uriParts[3]+" "+name, endHandler).outputString;
		if (prefOverwrite == 1 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha off "+scale+colors+" -geometry "+geometry+mode+uriParts[1]+"*"+uriParts[3]+" "+nameRGB, endHandler).outputString;
		if (prefOverwrite == 2 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha extract "+scale+colors+" -geometry "+geometry+mode+uriParts[1]+"*"+uriParts[3]+" "+nameAlpha, endHandler).outputString;
		alert(prefLocation+"montage -background none -alpha extract "+scale+colors+" -geometry "+geometry+mode+uriParts[1]+"*"+uriParts[3]+" "+nameAlpha);
		showSuccess(event);
	} else {
		if (prefOverwrite == 0 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha set "+scale+colors+" -geometry "+geometry+mode+uri.join(" ")+" "+name, endHandler).outputString;
		if (prefOverwrite == 1 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha off "+scale+colors+" -geometry "+geometry+mode+uri.join(" ")+" "+nameRGB, endHandler).outputString;
		if (prefOverwrite == 2 || prefOverwrite == 3) widget.system(prefLocation+"montage -background none -alpha extract "+scale+colors+" -geometry "+geometry+mode+uri.join(" ")+" "+nameAlpha, endHandler).outputString;
		alert(prefLocation+"montage -background none -alpha extract "+scale+colors+" -geometry "+geometry+mode+uri.join(" ")+" "+nameAlpha);
		showSuccess(event);
	}*/

	for (var i=0; i<uri.length; i++) {
		alert(prefLocation+"pngquant"+settings+uri[i]);
		widget.system(prefLocation+"pngquant"+settings+uri[i], endHandler).outputString;
//		/opt/local/bin/pngquant -force -speed 1 -ext .$1.dither.png $1 "$f"
//		/opt/local/bin/pngquant -force -nofs -speed 1 -ext .$1.png $1 "$f"
		if (i+1==uri.length) showSuccess(event);
	}

} catch (ex) {
	alert("Problem fetching URI: " + ex);
	showFail(event);
}
event.stopPropagation();
event.preventDefault();
}

function endHandler(output) {
//	alert("output = "+output.outputString);
	showMain();
}

function sortName(a, b) {
	var x = a.toLowerCase();
	var y = b.toLowerCase();
	return (x < y) ? -1 : ((x > y) ? 1 : 0);
}

function sortNumber(a, b) {
	return a - b;
}

function sortAlphaNum(a, b) {
	// the next four lines are designed specifically for OS X file arrays
	// and will need to be modified depending on the situation
	var x = a.split("/");
	var y = b.split("/");
	x = x[x.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	y = y[y.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	for (var i in x) {
		if (x[i] && !y[i] || isFinite(x[i]) && !isFinite(y[i])) {
			return -1;
		} else if (!x[i] && y[i] || !isFinite(y[i]) && isFinite(y[i])) {
			return 1;
		} else if (!isFinite(x[i]) && !isFinite(y[i])) {
			x[i] = x[i].toLowerCase();
			y[i] = y[i].toLowerCase();
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		} else {
			x[i] = parseFloat(x[i]);
			y[i] = parseFloat(y[i]);
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		}
	}
	return 0;
}



// Key listeners

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}

// CurrentView animations

function showMain(event) {
	document.getElementById("stack").object.setCurrentView("main", false, true);
}

function showSuccess(event) {
	document.getElementById("stack").object.setCurrentView("success", true, true);
}

function showFail(event) {
	document.getElementById("stack").object.setCurrentView("fail", true, true);
}

function showWrong(event) {
	document.getElementById("stack").object.setCurrentView("wrong", true, true);
}

function showUpdate(event) {
	document.getElementById("stack").object.setCurrentView("update", true, true);
}

// Get Key Value

function getKeyValue(plist, key) {
	var infoPlist = new XMLHttpRequest();
	infoPlist.open("GET", plist, false);
	infoPlist.send(null);
	infoPlist = infoPlist.responseText.replace(/(<([^>]+)>)/ig,"").replace(/\t/ig,"").split("\n");
	for (var i=0; i<infoPlist.length; i++)
		if (infoPlist[i] == key) return infoPlist[i+1];
	return false;
}

// Auto Update

function versionCheck(event) {
	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/crusher/version.php?RandomKey=" + Date.parse(new Date());
	request.onload = function() { versionCheckEnd(request); };
	request.open("GET", address);
//	request.setRequestHeader("Cache-Control", "no-cache");
	request.send(null);
}

function versionCheckEnd(request){
	if (request.status == 200) {
		var versions = request.responseText.split("\n");
		var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion");
		var websiteVersion = versions[0];
//		alert("bundleVersion: "+bundleVersion);
//		alert("websiteVersion: "+websiteVersion);

		if (websiteVersion > bundleVersion) {
			document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
			return showUpdate();
		} else {
//			alert("you have an up to date version");
		}
	} else {
//		alert("there's been an error fetching HTTP data");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/crusher/Crusher.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/crusher");
}